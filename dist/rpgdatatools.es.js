const t = () => [0, 0, 0, 0, 0, 0, 0, 0], p = (e) => ({
  id: 0,
  name: "",
  nickname: "",
  profile: "",
  note: "",
  classId: 0,
  initialLevel: 1,
  maxLevel: 99,
  characterIndex: 0,
  characterName: "",
  faceIndex: 0,
  faceName: "",
  battlerName: "",
  traits: [],
  equips: [],
  ...e
}), d = (e) => ({
  battlerHue: 0,
  id: 0,
  name: "",
  note: "",
  battlerName: "",
  traits: [],
  params: t(),
  exp: 0,
  gold: 0,
  dropItems: [],
  actions: [],
  ...e
}), u = (e) => ({
  price: 0,
  id: 0,
  name: "",
  note: "",
  iconIndex: 0,
  description: "",
  etypeId: 0,
  params: t(),
  traits: [],
  ...e
}), f = (e) => ({
  price: 0,
  id: 0,
  name: "",
  note: "",
  iconIndex: 0,
  description: "",
  etypeId: 0,
  wtypeId: 0,
  params: t(),
  traits: [],
  damage: r(),
  ...e
}), y = (e) => ({
  id: 0,
  name: "",
  note: "",
  traits: [],
  learnings: [],
  params: t(),
  expParams: [],
  ...e
}), r = (e) => ({
  type: 0,
  elementId: 0,
  formula: "0",
  variance: 20,
  critical: !1,
  ...e
}), g = (e) => ({
  id: 0,
  name: "",
  iconIndex: 0,
  description: "",
  note: "",
  price: 0,
  consumable: !1,
  scope: 0,
  occasion: 0,
  speed: 0,
  successRate: 100,
  repeats: 1,
  tpGain: 0,
  hitType: 0,
  animationId: 0,
  damage: r(),
  effects: [],
  ...e
}), v = (e) => ({
  animationId: 0,
  damage: r(),
  description: "",
  hitType: 0,
  iconIndex: 0,
  id: 0,
  message1: "",
  message2: "",
  mpCost: 0,
  name: "",
  note: "",
  occasion: 0,
  repeats: 1,
  requiredWtypeId1: 0,
  requiredWtypeId2: 0,
  scope: 0,
  speed: 0,
  stypeId: 0,
  successRate: 100,
  tpCost: 0,
  tpGain: 0,
  effects: [],
  messageType: 0,
  ...e
}), I = (e) => ({
  id: 0,
  name: "",
  iconIndex: 0,
  restriction: 0,
  priority: 50,
  motion: 0,
  overlay: 0,
  removeAtBattleEnd: !1,
  removeByRestriction: !1,
  autoRemovalTiming: 0,
  minTurns: 1,
  maxTurns: 1,
  removeByDamage: !1,
  chanceByDamage: 100,
  removeByWalking: !1,
  stepsToRemove: 100,
  message1: "",
  message2: "",
  message3: "",
  message4: "",
  traits: [],
  note: "",
  ...e
}), b = (e) => ({
  autoplayBgm: !0,
  autoplayBgs: !1,
  battleback1Name: "",
  battleback2Name: "",
  data: [],
  disableDashing: !1,
  displayName: "",
  encounterList: [],
  events: [],
  height: 0,
  note: "",
  width: 0,
  x: 0,
  y: 0,
  parallaxName: "",
  parallaxLoopX: !1,
  parallaxLoopY: !1,
  parallaxShow: !1,
  parallaxSx: 0,
  parallaxSy: 0,
  ...e
}), h = (e) => ({
  id: 0,
  name: "",
  note: "",
  x: 0,
  y: 0,
  pages: [n()],
  ...e
}), o = (e) => ({
  actorId: 0,
  actorValid: !1,
  itemId: 0,
  itemValid: !1,
  selfSwitchCh: "",
  selfSwitchValid: !1,
  switch1Id: 0,
  switch1Valid: !1,
  switch2Id: 0,
  switch2Valid: !1,
  variableId: 0,
  variableValid: !1,
  variableValue: 0,
  ...e
}), i = (e) => ({
  characterIndex: 0,
  characterName: "",
  direction: 6,
  pattern: 0,
  tileId: 0,
  ...e
}), n = (e) => ({
  conditions: o(),
  image: i(),
  moveRoute: {
    list: [],
    repeat: !1,
    wait: !1,
    skippable: !1
  },
  directionFix: !1,
  moveFrequency: 0,
  list: [],
  ...e
}), a = () => ({
  name: "",
  pan: 0,
  pitch: 0,
  volume: 0
}), x = () => ({
  local: "",
  gameTitle: "",
  currencyUnit: "",
  title1Name: "",
  terms: c(),
  title2Name: "",
  optAutosave: !1,
  attackMotions: [],
  startMapId: 0,
  startX: 0,
  startY: 0,
  switches: [],
  windowTone: [0, 0, 0, 0],
  editMapId: 0,
  testTroopId: 0,
  testBattlers: [],
  versionId: 0,
  advanced: void 0,
  armorTypes: [],
  elements: [],
  variables: [],
  equipTypes: [],
  sounds: [],
  titleBgm: a(),
  gameoverMe: a(),
  battleBgm: a(),
  defeatMe: a(),
  victoryMe: a(),
  battleback1Name: "",
  battleback2Name: "",
  battlerName: "",
  weaponTypes: [],
  skillTypes: [],
  optDisplayTp: !1,
  optDrawTitle: !1,
  optExtraExp: !1,
  optFloorDeath: !1,
  optFollowers: !1,
  optKeyItemsNumber: !1,
  optSideView: !1,
  optSlipDeath: !1,
  optTransparent: !1,
  boat: s(),
  ship: s(),
  airship: s()
}), s = () => ({
  bgm: { name: "", pan: 0, pitch: 0, volume: 0 },
  characterIndex: 0,
  characterName: "",
  startMapId: 0,
  startX: 0,
  startY: 0
}), c = () => ({
  messages: m(),
  commands: [],
  params: l(),
  basic: []
}), l = () => ["mhp", "mmp", "atk", "def", "mat", "mdf", "agi", "luk", "hit", "eva"], m = () => ({
  alwaysDash: "",
  commandRemember: "",
  touchUI: "",
  bgmVolume: "",
  bgsVolume: "",
  meVolume: "",
  seVolume: "",
  possession: "",
  expTotal: "",
  expNext: "",
  saveMessage: "",
  loadMessage: "",
  file: "",
  autosave: "",
  partyName: "",
  emerge: "",
  preemptive: "",
  surprise: "",
  escapeStart: "",
  escapeFailure: "",
  victory: "",
  defeat: "",
  obtainExp: "",
  obtainGold: "",
  obtainItem: "",
  levelUp: "",
  obtainSkill: "",
  useItem: "",
  criticalToEnemy: "",
  criticalToActor: "",
  actorDamage: "",
  actorRecovery: "",
  actorGain: "",
  actorLoss: "",
  actorDrain: "",
  actorNoDamage: "",
  actorNoHit: "",
  enemyDamage: "",
  enemyRecovery: "",
  enemyGain: "",
  enemyLoss: "",
  enemyDrain: "",
  enemyNoDamage: "",
  enemyNoHit: "",
  evasion: "",
  magicEvasion: "",
  magicReflection: "",
  counterAttack: "",
  substitute: "",
  buffAdd: "",
  debuffAdd: "",
  buffRemove: "",
  actionFailure: ""
});
export {
  p as createActor,
  u as createArmor,
  a as createAudio,
  y as createClass,
  o as createCondtion,
  r as createDamage,
  d as createEnemy,
  n as createEventPage,
  g as createItem,
  b as createMap,
  h as createMapEvent,
  i as createMapEventImage,
  m as createMessages,
  t as createParamArray,
  l as createParamNames,
  v as createSkill,
  I as createState,
  x as createSystemData,
  c as createTerms,
  f as createWeapon
};
