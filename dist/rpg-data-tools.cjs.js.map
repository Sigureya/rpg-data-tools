{"version":3,"file":"rpg-data-tools.cjs.js","sources":["../src/constructData/mainData.ts","../src/constructData/map.ts","../src/constructData/audio/createAudio.ts","../src/constructData/systemData.ts","../src/commandMapper/commandGroop/pickCommands/commandCheck.ts","../src/commandMapper/commandGroop/pickCommands/errorConstants.ts","../src/commandMapper/commandGroop/pickCommands/pickCommands.ts","../src/commandMapper/commandGroop/pickCommands/join.ts","../src/commandMapper/commandGroop/pickCommands/commandComment.ts","../src/commandMapper/commandGroop/pickCommands/commandScript.ts","../src/commandMapper/commandGroop/pickCommands/commandMessage.ts","../src/commandMapper/commandGroop/pickCommands/commandScrollText.ts","../src/commandMapper/commandGroop/commandGroop.ts","../src/commandMapper/commandGroop/onGroup.ts","../src/commandMapper/text.ts","../src/format/note/note.ts","../src/format/codeInfoText.ts","../src/format/controlChars/constants.ts","../src/format/controlChars/controlChars.ts","../src/format/controlChars/getContolChars.ts","../src/utils/dataPicker/pickPropety.ts","../src/utils/dataPicker/pickCommandParam.ts"],"sourcesContent":["import type {\r\n  Data_Actor,\r\n  Data_Enemy,\r\n  Data_Weapon,\r\n  Data_Armor,\r\n  Data_Class,\r\n  Data_Skill,\r\n  Data_Item,\r\n  Data_State,\r\n  ParamArray,\r\n} from \"@sigureya/rpgtypes\";\r\n\r\nexport const constructParamArray = (): ParamArray => {\r\n  return [0, 0, 0, 0, 0, 0, 0, 0];\r\n};\r\n\r\nexport const constructActor = (proto?: Partial<Data_Actor>): Data_Actor => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    nickname: \"\",\r\n    profile: \"\",\r\n    note: \"\",\r\n    classId: 0,\r\n    initialLevel: 1,\r\n    maxLevel: 99,\r\n    characterIndex: 0,\r\n    characterName: \"\",\r\n    faceIndex: 0,\r\n    faceName: \"\",\r\n    battlerName: \"\",\r\n    traits: [],\r\n    equips: [],\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructEnemy = (proto?: Partial<Data_Enemy>): Data_Enemy => {\r\n  return {\r\n    battlerHue: 0,\r\n    id: 0,\r\n    name: \"\",\r\n    note: \"\",\r\n    battlerName: \"\",\r\n    traits: [],\r\n    params: constructParamArray(),\r\n    exp: 0,\r\n    gold: 0,\r\n    dropItems: [],\r\n    actions: [],\r\n\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructArmor = (proto?: Partial<Data_Armor>): Data_Armor => {\r\n  return {\r\n    price: 0,\r\n    id: 0,\r\n    name: \"\",\r\n    note: \"\",\r\n    iconIndex: 0,\r\n    description: \"\",\r\n    etypeId: 0,\r\n    params: constructParamArray(),\r\n    traits: [],\r\n\r\n    ...proto,\r\n  };\r\n};\r\nexport const constructWeapon = (proto?: Partial<Data_Weapon>): Data_Weapon => {\r\n  return {\r\n    price: 0,\r\n    id: 0,\r\n    name: \"\",\r\n    note: \"\",\r\n    iconIndex: 0,\r\n    description: \"\",\r\n    etypeId: 0,\r\n    wtypeId: 0,\r\n    params: constructParamArray(),\r\n    traits: [],\r\n    damage: constructDamage(),\r\n\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructClass = (proto?: Partial<Data_Class>): Data_Class => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    note: \"\",\r\n    traits: [],\r\n    learnings: [],\r\n    params: constructParamArray(),\r\n    expParams: [],\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructDamage = (\r\n  proto?: Partial<Data_Skill[\"damage\"]>\r\n): Data_Skill[\"damage\"] => {\r\n  return {\r\n    type: 0,\r\n    elementId: 0,\r\n    formula: \"0\",\r\n    variance: 20,\r\n    critical: false,\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructItem = (proto?: Partial<Data_Item>): Data_Item => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    iconIndex: 0,\r\n    description: \"\",\r\n    note: \"\",\r\n    price: 0,\r\n    consumable: false,\r\n    scope: 0,\r\n    occasion: 0,\r\n    speed: 0,\r\n    successRate: 100,\r\n    repeats: 1,\r\n    tpGain: 0,\r\n    hitType: 0,\r\n    animationId: 0,\r\n    damage: constructDamage(),\r\n    effects: [],\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructSkill = (proto?: Partial<Data_Skill>): Data_Skill => {\r\n  return {\r\n    animationId: 0,\r\n    damage: constructDamage(),\r\n    description: \"\",\r\n    hitType: 0,\r\n    iconIndex: 0,\r\n    id: 0,\r\n    message1: \"\",\r\n    message2: \"\",\r\n    mpCost: 0,\r\n    name: \"\",\r\n    note: \"\",\r\n    occasion: 0,\r\n    repeats: 1,\r\n    requiredWtypeId1: 0,\r\n    requiredWtypeId2: 0,\r\n    scope: 0,\r\n    speed: 0,\r\n    stypeId: 0,\r\n    successRate: 100,\r\n    tpCost: 0,\r\n    tpGain: 0,\r\n    effects: [],\r\n    messageType: 0,\r\n\r\n    ...proto,\r\n  };\r\n};\r\n\r\nexport const constructState = (proto?: Partial<Data_State>): Data_State => {\r\n  return {\r\n    id: 0,\r\n    name: \"\",\r\n    iconIndex: 0,\r\n    restriction: 0,\r\n    priority: 50,\r\n    motion: 0,\r\n    overlay: 0,\r\n    removeAtBattleEnd: false,\r\n    removeByRestriction: false,\r\n    autoRemovalTiming: 0,\r\n    minTurns: 1,\r\n    maxTurns: 1,\r\n    removeByDamage: false,\r\n    chanceByDamage: 100,\r\n    removeByWalking: false,\r\n    stepsToRemove: 100,\r\n    message1: \"\",\r\n    message2: \"\",\r\n    message3: \"\",\r\n    message4: \"\",\r\n    traits: [],\r\n    note: \"\",\r\n    ...proto,\r\n  };\r\n};\r\n","import type { Data_Map, MapEvent } from \"@sigureya/rpgtypes\";\r\nimport type { MapEventPage } from \"@sigureya/rpgtypes\";\r\n\r\nexport const createMap = (\r\n  proto: {\r\n    bgm: Data_Map[\"bgm\"];\r\n    bgs: Data_Map[\"bgs\"];\r\n  } & Partial<Data_Map>\r\n): Data_Map => ({\r\n  autoplayBgm: true,\r\n  autoplayBgs: false,\r\n  battleback1Name: \"\",\r\n  battleback2Name: \"\",\r\n  data: [],\r\n  disableDashing: false,\r\n  displayName: \"\",\r\n  encounterList: [],\r\n  events: [],\r\n  height: 0,\r\n  note: \"\",\r\n  width: 0,\r\n  x: 0,\r\n  y: 0,\r\n  parallaxName: \"\",\r\n  parallaxLoopX: false,\r\n  parallaxLoopY: false,\r\n  parallaxShow: false,\r\n  parallaxSx: 0,\r\n  parallaxSy: 0,\r\n  ...proto,\r\n});\r\n\r\nexport const createMapEvent = (arg?: Partial<MapEvent>): MapEvent => ({\r\n  id: 0,\r\n  name: \"\",\r\n  note: \"\",\r\n  x: 0,\r\n  y: 0,\r\n  pages: [createEventPage()],\r\n  ...arg,\r\n});\r\n\r\nexport const createCondtion = (\r\n  arg?: Partial<MapEventPage[\"conditions\"]>\r\n): MapEventPage[\"conditions\"] => ({\r\n  actorId: 0,\r\n  actorValid: false,\r\n  itemId: 0,\r\n  itemValid: false,\r\n  selfSwitchCh: \"\",\r\n  selfSwitchValid: false,\r\n  switch1Id: 0,\r\n  switch1Valid: false,\r\n  switch2Id: 0,\r\n  switch2Valid: false,\r\n  variableId: 0,\r\n  variableValid: false,\r\n  variableValue: 0,\r\n  ...arg,\r\n});\r\n\r\nexport const createMapEventImage = (\r\n  arg?: Partial<MapEventPage[\"image\"]>\r\n): MapEventPage[\"image\"] => ({\r\n  characterIndex: 0,\r\n  characterName: \"\",\r\n  direction: 6,\r\n  pattern: 0,\r\n  tileId: 0,\r\n  ...arg,\r\n});\r\n\r\nexport const createEventPage = (arg?: Partial<MapEventPage>): MapEventPage => ({\r\n  conditions: createCondtion(),\r\n  image: createMapEventImage(),\r\n  moveRoute: {\r\n    list: [],\r\n    repeat: false,\r\n    wait: false,\r\n    skippable: false,\r\n  },\r\n  directionFix: false,\r\n  moveFrequency: 0,\r\n  list: [],\r\n  ...arg,\r\n});\r\n","import type { AudioFileParams } from \"@sigureya/rpgtypes\";\r\n\r\nexport const createAudio = (): AudioFileParams => {\r\n  return {\r\n    name: \"\",\r\n    pan: 0,\r\n    pitch: 100,\r\n    volume: 90,\r\n  };\r\n};\r\n","import type {\r\n  Data_System,\r\n  Terms_Messages,\r\n  System_Terms,\r\n  System_Advanced,\r\n  Data_Vehicle,\r\n  Terms_BasicArray,\r\n  Terms_ParamNamesArray,\r\n  Terms_CommandArray,\r\n  System_SoundsArray,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { SystemSounds } from \"./audio\";\r\nimport { createAudio } from \"./audio\";\r\nimport type { ParamTable } from \"./paramArray\";\r\nimport type { Terms_Commands, BasicTerms } from \"./types\";\r\n\r\nexport const createSystemData = (\r\n  system: Partial<Data_System> = {}\r\n): Data_System => ({\r\n  local: system.local ?? \"\",\r\n  gameTitle: system.gameTitle ?? \"\",\r\n  currencyUnit: system.currencyUnit ?? \"\",\r\n  title1Name: system.title1Name ?? \"\",\r\n  terms: system.terms ?? createTerms(),\r\n  title2Name: system.title2Name ?? \"\",\r\n  optAutosave: system.optAutosave ?? false,\r\n  attackMotions: system.attackMotions ?? [],\r\n  startMapId: system.startMapId ?? 0,\r\n  startX: system.startX ?? 0,\r\n  startY: system.startY ?? 0,\r\n  switches: system.switches ?? [],\r\n  windowTone: system.windowTone ?? [0, 0, 0, 0],\r\n  editMapId: system.editMapId ?? 0,\r\n  testTroopId: system.testTroopId ?? 0,\r\n  testBattlers: system.testBattlers ?? [],\r\n  versionId: system.versionId ?? 0,\r\n  advanced: system.advanced ?? createAdvanced(),\r\n  armorTypes: system.armorTypes ?? [],\r\n  elements: system.elements ?? [],\r\n  variables: system.variables ?? [],\r\n  equipTypes: system.equipTypes ?? [],\r\n  sounds: system.sounds ?? createSystemSoundsArray(),\r\n  titleBgm: system.titleBgm ?? createAudio(),\r\n  gameoverMe: system.gameoverMe ?? createAudio(),\r\n  battleBgm: system.battleBgm ?? createAudio(),\r\n  defeatMe: system.defeatMe ?? createAudio(),\r\n  victoryMe: system.victoryMe ?? createAudio(),\r\n  battleback1Name: system.battleback1Name ?? \"\",\r\n  battleback2Name: system.battleback2Name ?? \"\",\r\n  battlerName: system.battlerName ?? \"\",\r\n  weaponTypes: system.weaponTypes ?? [],\r\n  skillTypes: system.skillTypes ?? [],\r\n  optDisplayTp: system.optDisplayTp ?? false,\r\n  optDrawTitle: system.optDrawTitle ?? false,\r\n  optExtraExp: system.optExtraExp ?? false,\r\n  optFloorDeath: system.optFloorDeath ?? false,\r\n  optFollowers: system.optFollowers ?? false,\r\n  optKeyItemsNumber: system.optKeyItemsNumber ?? false,\r\n  optSideView: system.optSideView ?? false,\r\n  optSlipDeath: system.optSlipDeath ?? false,\r\n  optTransparent: system.optTransparent ?? false,\r\n  boat: system.boat ?? createVehicle(),\r\n  ship: system.ship ?? createVehicle(),\r\n  airship: system.airship ?? createVehicle(),\r\n  tileSize: system.tileSize ?? 0,\r\n});\r\n\r\nexport const createTerms = (\r\n  proto: {\r\n    messages?: Partial<Terms_Messages>;\r\n    commands?: Partial<Terms_Commands>;\r\n    params?: Partial<ParamTable<string>>;\r\n    basic?: Partial<BasicTerms>;\r\n  } = {}\r\n): System_Terms => ({\r\n  messages: createMessages(proto.messages ?? {}),\r\n  commands: createCommandsArray(proto.commands ?? {}),\r\n  params: createParamNamesArray(proto.params ?? {}),\r\n  basic: createBasicTerms(proto.basic ?? {}),\r\n});\r\n\r\nexport const createBasicTerms = (\r\n  proto: Partial<BasicTerms> = {}\r\n): Terms_BasicArray => [\r\n  proto.level ?? \"\",\r\n  proto.levelA ?? \"\",\r\n  proto.hp ?? \"\",\r\n  proto.hpA ?? \"\",\r\n  proto.mp ?? \"\",\r\n  proto.mpA ?? \"\",\r\n  proto.tp ?? \"\",\r\n  proto.tpA ?? \"\",\r\n  proto.experience ?? \"\",\r\n  proto.exp ?? \"\",\r\n];\r\n\r\nexport const createParamNamesArray = (\r\n  names: Partial<ParamTable<string>> = {}\r\n): Terms_ParamNamesArray => [\r\n  names.mhp ?? \"\",\r\n  names.mmp ?? \"\",\r\n  names.atk ?? \"\",\r\n  names.def ?? \"\",\r\n  names.mat ?? \"\",\r\n  names.mdf ?? \"\",\r\n  names.agi ?? \"\",\r\n  names.luk ?? \"\",\r\n  names.hit ?? \"\",\r\n  names.eva ?? \"\",\r\n];\r\n\r\nexport const createCommandsArray = (\r\n  proto: Partial<Terms_Commands> = {}\r\n): Terms_CommandArray => [\r\n  proto.fight ?? \"\",\r\n  proto.escape ?? \"\",\r\n  proto.attack ?? \"\",\r\n  proto.guard ?? \"\",\r\n  proto.item ?? \"\",\r\n  proto.skill ?? \"\",\r\n  proto.equip ?? \"\",\r\n  proto.status ?? \"\",\r\n  proto.formation ?? \"\",\r\n  proto.save ?? \"\",\r\n  proto.gameEnd ?? \"\",\r\n  proto.options ?? \"\",\r\n  proto.weapon ?? \"\",\r\n  proto.armor ?? \"\",\r\n  proto.keyItem ?? \"\",\r\n  proto.equip2 ?? \"\",\r\n  proto.optimize ?? \"\",\r\n  proto.clear ?? \"\",\r\n  proto.newGame ?? \"\",\r\n  proto.continue_ ?? \"\",\r\n  proto.notUsed20 ?? \"\",\r\n  proto.toTitle ?? \"\",\r\n  proto.cancel ?? \"\",\r\n  proto.notUsed23 ?? \"\",\r\n  proto.buy ?? \"\",\r\n  proto.sell ?? \"\",\r\n];\r\n\r\nexport const createMessages = (\r\n  proto: Partial<Terms_Messages> = {}\r\n): Terms_Messages => ({\r\n  alwaysDash: proto.alwaysDash ?? \"\",\r\n  commandRemember: proto.commandRemember ?? \"\",\r\n  touchUI: proto.touchUI ?? \"\",\r\n  bgmVolume: proto.bgmVolume ?? \"\",\r\n  bgsVolume: proto.bgsVolume ?? \"\",\r\n  meVolume: proto.meVolume ?? \"\",\r\n  seVolume: proto.seVolume ?? \"\",\r\n  possession: proto.possession ?? \"\",\r\n  expTotal: proto.expTotal ?? \"\",\r\n  expNext: proto.expNext ?? \"\",\r\n  saveMessage: proto.saveMessage ?? \"\",\r\n  loadMessage: proto.loadMessage ?? \"\",\r\n  file: proto.file ?? \"\",\r\n  autosave: proto.autosave ?? \"\",\r\n  partyName: proto.partyName ?? \"\",\r\n  emerge: proto.emerge ?? \"\",\r\n  preemptive: proto.preemptive ?? \"\",\r\n  surprise: proto.surprise ?? \"\",\r\n  escapeStart: proto.escapeStart ?? \"\",\r\n  escapeFailure: proto.escapeFailure ?? \"\",\r\n  victory: proto.victory ?? \"\",\r\n  defeat: proto.defeat ?? \"\",\r\n  obtainExp: proto.obtainExp ?? \"\",\r\n  obtainGold: proto.obtainGold ?? \"\",\r\n  obtainItem: proto.obtainItem ?? \"\",\r\n  levelUp: proto.levelUp ?? \"\",\r\n  obtainSkill: proto.obtainSkill ?? \"\",\r\n  useItem: proto.useItem ?? \"\",\r\n  criticalToEnemy: proto.criticalToEnemy ?? \"\",\r\n  criticalToActor: proto.criticalToActor ?? \"\",\r\n  actorDamage: proto.actorDamage ?? \"\",\r\n  actorRecovery: proto.actorRecovery ?? \"\",\r\n  actorGain: proto.actorGain ?? \"\",\r\n  actorLoss: proto.actorLoss ?? \"\",\r\n  actorDrain: proto.actorDrain ?? \"\",\r\n  actorNoDamage: proto.actorNoDamage ?? \"\",\r\n  actorNoHit: proto.actorNoHit ?? \"\",\r\n  enemyDamage: proto.enemyDamage ?? \"\",\r\n  enemyRecovery: proto.enemyRecovery ?? \"\",\r\n  enemyGain: proto.enemyGain ?? \"\",\r\n  enemyLoss: proto.enemyLoss ?? \"\",\r\n  enemyDrain: proto.enemyDrain ?? \"\",\r\n  enemyNoDamage: proto.enemyNoDamage ?? \"\",\r\n  enemyNoHit: proto.enemyNoHit ?? \"\",\r\n  evasion: proto.evasion ?? \"\",\r\n  magicEvasion: proto.magicEvasion ?? \"\",\r\n  magicReflection: proto.magicReflection ?? \"\",\r\n  counterAttack: proto.counterAttack ?? \"\",\r\n  substitute: proto.substitute ?? \"\",\r\n  buffAdd: proto.buffAdd ?? \"\",\r\n  debuffAdd: proto.debuffAdd ?? \"\",\r\n  buffRemove: proto.buffRemove ?? \"\",\r\n  actionFailure: proto.actionFailure ?? \"\",\r\n});\r\nexport const createAdvanced = (\r\n  proto: Partial<System_Advanced> = {}\r\n): System_Advanced => ({\r\n  gameId: proto.gameId ?? 0,\r\n  screenWidth: proto.screenWidth ?? 0,\r\n  screenHeight: proto.screenHeight ?? 0,\r\n  uiAreaWidth: proto.uiAreaWidth ?? 0,\r\n  uiAreaHeight: proto.uiAreaHeight ?? 0,\r\n  windowOpacity: proto.windowOpacity ?? 0,\r\n  screenScale: proto.screenScale ?? 0,\r\n  numberFontFilename: proto.numberFontFilename ?? \"\",\r\n  mainFontFilename: proto.mainFontFilename ?? \"\",\r\n  fallbackFonts: proto.fallbackFonts ?? \"\",\r\n  fontSize: proto.fontSize ?? 0,\r\n});\r\n\r\nexport const createVehicle = (\r\n  proto: Partial<Data_Vehicle> = {}\r\n): Data_Vehicle => ({\r\n  bgm: proto.bgm ?? createAudio(),\r\n  characterIndex: proto.characterIndex ?? 0,\r\n  characterName: proto.characterName ?? \"\",\r\n  startMapId: proto.startMapId ?? 0,\r\n  startX: proto.startX ?? 0,\r\n  startY: proto.startY ?? 0,\r\n});\r\n\r\nexport const createSystemSoundsArray = (\r\n  proto: Partial<SystemSounds> = {}\r\n): System_SoundsArray => [\r\n  proto.cursor ?? createAudio(),\r\n  proto.ok ?? createAudio(),\r\n  proto.cancel ?? createAudio(),\r\n  proto.buzzer ?? createAudio(),\r\n  proto.equip ?? createAudio(),\r\n  proto.save ?? createAudio(),\r\n  proto.load ?? createAudio(),\r\n  proto.battleStart ?? createAudio(),\r\n  proto.escape ?? createAudio(),\r\n  proto.enemyAttack ?? createAudio(),\r\n  proto.enemyDamage ?? createAudio(),\r\n  proto.enemyCollapse ?? createAudio(),\r\n  proto.bossCollapse1 ?? createAudio(),\r\n  proto.bossCollapse2 ?? createAudio(),\r\n  proto.actorDamage ?? createAudio(),\r\n  proto.actorCollapse ?? createAudio(),\r\n  proto.playRecovery ?? createAudio(),\r\n  proto.playMiss ?? createAudio(),\r\n  proto.playEvasion ?? createAudio(),\r\n  proto.playMagicEvasion ?? createAudio(),\r\n  proto.playReflection ?? createAudio(),\r\n  proto.shop ?? createAudio(),\r\n  proto.useItem ?? createAudio(),\r\n  proto.useSkill ?? createAudio(),\r\n];\r\n","import type { EventCode, EventCommandLike } from \"@sigureya/rpgtypes\";\r\n\r\nexport const codeTest = <Code extends EventCode>(\r\n  code: Code,\r\n  command: EventCommandLike | undefined\r\n): command is EventCommandLike<Code> => {\r\n  if (!command) {\r\n    return false;\r\n  }\r\n  return code === command.code;\r\n};\r\n","export const ERROR_COMMAND_MESSAGE = \"MessageHeader invalid command\" as const;\r\nexport const ERROR_COMMAND_SCRIPT = \"Script invalid command\" as const;\r\nexport const ERROR_INVALID_HEAD = \"Invalid Head\" as const;\r\n","import type {\r\n  EventCommandLike,\r\n  EventCode,\r\n  EventCommand,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { Command_TextBody } from \"./types\";\r\nimport { codeTest } from \"./commandCheck\";\r\nimport { ERROR_INVALID_HEAD } from \"./errorConstants\";\r\n\r\nexport const isBodyParams = (\r\n  param: unknown[]\r\n): param is [string] & { length: 1 } => {\r\n  return typeof param[0] === \"string\" && param.length === 1;\r\n};\r\n\r\nexport const isHeadCommand = <Code extends EventCode>(\r\n  code: Code,\r\n  command: EventCommandLike | undefined\r\n): command is {\r\n  code: Code;\r\n  indent: number;\r\n  parameters: [string];\r\n} => {\r\n  if (!command) {\r\n    return false;\r\n  }\r\n  return code === command.code && isBodyParams(command.parameters);\r\n};\r\n\r\nexport const pickCommands = <Code extends EventCode>(\r\n  code: Code,\r\n  arrya: ReadonlyArray<EventCommand>,\r\n  start: number\r\n) => {\r\n  const result: {\r\n    code: Code;\r\n    indent: number;\r\n    parameters: [string];\r\n  }[] = [];\r\n  for (let i = start; i < arrya.length; i++) {\r\n    const command = arrya[i];\r\n    if (codeTest(code, command) && isBodyParams(command.parameters)) {\r\n      result.push({\r\n        code: code,\r\n        indent: command.indent,\r\n        parameters: [command.parameters[0]],\r\n      });\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const pickHead = <Code extends EventCode>(\r\n  commands: ReadonlyArray<EventCommand>,\r\n  index: number,\r\n  code: Code\r\n): Command_TextBody<Code> => {\r\n  const head = commands[index];\r\n  if (head) {\r\n    if (codeTest(code, head) && isBodyParams(head.parameters)) {\r\n      return {\r\n        code: code,\r\n        indent: head.indent,\r\n        parameters: [head.parameters[0]],\r\n      };\r\n    }\r\n  }\r\n  throw new Error(ERROR_INVALID_HEAD, { cause: head });\r\n};\r\n","import type { Command_TextBody } from \"./types\";\r\n\r\nexport const joinCommandBodies = <Command extends Command_TextBody>(\r\n  array: ReadonlyArray<Command>,\r\n  sepadrator = \"\\n\"\r\n) => {\r\n  return array.map((v) => v.parameters[0]).join(sepadrator);\r\n};\r\n","import type {\r\n  EventCommand,\r\n  Command_Comment,\r\n  Command_CommentBody,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { COMMENT, COMMENT_BODY } from \"@sigureya/rpgtypes\";\r\nimport { pickHead, pickCommands } from \"./pickCommands\";\r\nimport type { EventCommandPair } from \"./types\";\r\n\r\nexport const pickComments = (\r\n  array: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): EventCommandPair<Command_Comment, Command_CommentBody> => {\r\n  const head = pickHead(array, start, COMMENT);\r\n\r\n  return {\r\n    head: head,\r\n    bodys: pickCommands(COMMENT_BODY, array, start + 1),\r\n  };\r\n};\r\n","import type {\r\n  EventCommand,\r\n  Command_ScriptHeader,\r\n  Command_ScriptBody,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { SCRIPT_EVAL, SCRIPT_EVAL_BODY } from \"@sigureya/rpgtypes\";\r\nimport { pickCommands, pickHead } from \"./pickCommands\";\r\nimport type { EventCommandPair } from \"./types\";\r\n\r\nexport const pickScripts = (\r\n  arrya: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): EventCommandPair<Command_ScriptHeader, Command_ScriptBody> => {\r\n  const head = pickHead(arrya, start, SCRIPT_EVAL);\r\n  return {\r\n    head: head,\r\n    bodys: pickCommands(SCRIPT_EVAL_BODY, arrya, start + 1),\r\n  };\r\n};\r\n","import type {\r\n  Command_ShowMessage,\r\n  Command_ShowMessageBody,\r\n} from \"@sigureya/rpgtypes\";\r\nimport {\r\n  SHOW_MESSAGE,\r\n  SHOW_MESSAGE_BODY,\r\n  type EventCommand,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { pickCommands } from \"./pickCommands\";\r\nimport type { EventCommandPair } from \"./types\";\r\nimport { ERROR_COMMAND_MESSAGE } from \"./errorConstants\";\r\n\r\nexport const pickMessageHeader = (\r\n  arrya: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): Command_ShowMessage => {\r\n  const head = arrya[start];\r\n  if (head) {\r\n    if (isMessageHeader(head)) {\r\n      return head;\r\n    }\r\n  }\r\n  throw new Error(ERROR_COMMAND_MESSAGE, { cause: head });\r\n};\r\n\r\nexport const isMessageHeader = (\r\n  command: EventCommand | undefined\r\n): command is Command_ShowMessage => {\r\n  if (!command) {\r\n    return false;\r\n  }\r\n  if (command.code !== SHOW_MESSAGE) {\r\n    return false;\r\n  }\r\n  if (![4, 5].includes(command.parameters.length)) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    typeof command.parameters[0] === \"string\" &&\r\n    typeof command.parameters[1] === \"number\" &&\r\n    typeof command.parameters[2] === \"number\" &&\r\n    typeof command.parameters[3] === \"number\"\r\n    //    typeof command.parameters[4] === \"string\"\r\n  );\r\n};\r\nexport const pickMessageWithHead = (\r\n  arrya: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): EventCommandPair<Command_ShowMessage, Command_ShowMessageBody> => {\r\n  const head = pickMessageHeader(arrya, start);\r\n  return {\r\n    head: head,\r\n    bodys: pickCommands(SHOW_MESSAGE_BODY, arrya, start + 1),\r\n  };\r\n};\r\n","import type {\r\n  EventCommand,\r\n  Command_ShowScrollingText,\r\n  Command_ShowScrollingTextBody,\r\n} from \"@sigureya/rpgtypes\";\r\nimport {\r\n  SHOW_SCROLLING_TEXT,\r\n  SHOW_SCROLLING_TEXT_BODY,\r\n} from \"@sigureya/rpgtypes\";\r\nimport { codeTest } from \"./commandCheck\";\r\nimport { pickCommands } from \"./pickCommands\";\r\nimport type { CommandReadError, EventCommandPair } from \"./types\";\r\n\r\nexport type CommandPair_ScrollingText = EventCommandPair<\r\n  Command_ShowScrollingText,\r\n  Command_ShowScrollingTextBody\r\n>;\r\nexport const ERROR_MESSAGE = \"ScrollTextHeader invalid command\" as const;\r\n\r\nexport const pickScrollTextHeader = (\r\n  array: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): Command_ShowScrollingText => {\r\n  const cmd = array[start];\r\n  if (codeTest(SHOW_SCROLLING_TEXT, cmd)) {\r\n    return cmd;\r\n  }\r\n  const error: CommandReadError = {\r\n    headCode: SHOW_SCROLLING_TEXT,\r\n    bodyCode: SHOW_SCROLLING_TEXT_BODY,\r\n    index: start,\r\n  };\r\n  throw new Error(ERROR_MESSAGE, { cause: error });\r\n};\r\n\r\nexport const pickScrollText = (\r\n  array: ReadonlyArray<EventCommand>,\r\n  start: number\r\n): CommandPair_ScrollingText => {\r\n  const head = pickScrollTextHeader(array, start);\r\n  return {\r\n    head: head,\r\n    bodys: pickCommands(SHOW_SCROLLING_TEXT_BODY, array, start + 1),\r\n  };\r\n};\r\n","import type { EventCommandLike } from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  Command_TextBody as EventCommandBody,\r\n  EventCommandPair,\r\n} from \"./pickCommands\";\r\nimport { joinCommandBodies } from \"./pickCommands\";\r\nimport type { EventCommandGroup } from \"./types\";\r\n\r\nexport abstract class BaseEventCommandGroup<\r\n  Header extends EventCommandLike,\r\n  Body extends EventCommandBody\r\n> implements EventCommandGroup<Header, Body>\r\n{\r\n  constructor(protected pair: EventCommandPair<Header, Body>) {}\r\n  protected abstract getExpandedBodies(): EventCommandBody[];\r\n\r\n  getBodyText(separator: string = \"\\n\"): string {\r\n    return joinCommandBodies(this.getExpandedBodies(), separator);\r\n  }\r\n\r\n  joinCommandBodies() {\r\n    return this.getExpandedBodies();\r\n  }\r\n\r\n  get header(): Header {\r\n    return this.pair.head;\r\n  }\r\n  get bodies(): Body[] {\r\n    return this.pair.bodys;\r\n  }\r\n}\r\n\r\nexport class SimpleEventCommandGroup<\r\n  Header extends EventCommandLike,\r\n  Body extends EventCommandBody\r\n> extends BaseEventCommandGroup<Header, Body> {\r\n  constructor(pair: EventCommandPair<Header, Body>) {\r\n    super(pair);\r\n  }\r\n  protected getExpandedBodies(): Body[] {\r\n    return this.bodies;\r\n  }\r\n}\r\n\r\nexport class CombinedEventCommandGroup<\r\n  Header extends EventCommandBody,\r\n  Body extends EventCommandBody\r\n> extends BaseEventCommandGroup<Header, Body> {\r\n  constructor(pair: EventCommandPair<Header, Body>) {\r\n    super(pair);\r\n  }\r\n  protected getExpandedBodies(): [Header, ...Body[]] {\r\n    return [this.header, ...this.bodies];\r\n  }\r\n}\r\n","import type { EventCommand } from \"@sigureya/rpgtypes\";\r\n\r\nimport type {\r\n  EventCommandGroup_Comment,\r\n  EventCommandGroup_Message,\r\n  EventCommandGroup_Script,\r\n  EventCommandGroup_ScrollingText,\r\n} from \"./types\";\r\n\r\nimport {\r\n  pickComments,\r\n  pickMessageWithHead,\r\n  pickScripts,\r\n  pickScrollText,\r\n} from \"./pickCommands\";\r\nimport {\r\n  SimpleEventCommandGroup,\r\n  CombinedEventCommandGroup,\r\n} from \"./commandGroop\";\r\n\r\nexport const handleGroupMessage = <Result>(\r\n  array: ReadonlyArray<EventCommand>,\r\n  index: number,\r\n  func: (groop: EventCommandGroup_Message) => Result\r\n): Result => {\r\n  const pair = pickMessageWithHead(array, index);\r\n\r\n  const group = new SimpleEventCommandGroup(pair);\r\n  return func(group);\r\n};\r\n\r\nexport const handleGroupScrollingText = <Result>(\r\n  array: ReadonlyArray<EventCommand>,\r\n  index: number,\r\n  func: (groop: EventCommandGroup_ScrollingText) => Result\r\n): Result => {\r\n  const pair = pickScrollText(array, index);\r\n  const group = new SimpleEventCommandGroup(pair);\r\n  return func(group);\r\n};\r\n\r\nexport const handleGroupComment = <Result>(\r\n  array: ReadonlyArray<EventCommand>,\r\n  index: number,\r\n  func: (group: EventCommandGroup_Comment) => Result\r\n): Result => {\r\n  const pair = pickComments(array, index);\r\n  const group = new CombinedEventCommandGroup(pair);\r\n  return func(group);\r\n};\r\n\r\nexport const handleGroupScript = <Result>(\r\n  array: ReadonlyArray<EventCommand>,\r\n  index: number,\r\n  func: (group: EventCommandGroup_Script) => Result\r\n): Result => {\r\n  const pair = pickScripts(array, index);\r\n  const groop = new CombinedEventCommandGroup(pair);\r\n  return func(groop);\r\n};\r\n","import {\r\n  CHANGE_NAME,\r\n  CHANGE_NICKNAME,\r\n  CHANGE_PROFILE,\r\n  COMMENT,\r\n  SCRIPT_EVAL,\r\n  SHOW_CHOICES,\r\n  SHOW_CHOICES_ITEM,\r\n  SHOW_MESSAGE,\r\n  SHOW_SCROLLING_TEXT,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  Command_ChangeName,\r\n  Command_ChangeNickName,\r\n  Command_ChangeProfile,\r\n  Command_ChoiceWhen,\r\n  Command_CommentBody,\r\n  Command_ShowChoices,\r\n  Command_ShowScrollingText,\r\n  EventCommand,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { CallBackFunc } from \"./types\";\r\nimport {\r\n  type EventCommandGroup_Message,\r\n  type EventCommandGroup_ScrollingText,\r\n  type EventCommandGroup_Comment,\r\n  type EventCommandGroup_Script,\r\n  handleGroupMessage,\r\n  handleGroupScrollingText,\r\n  handleGroupComment,\r\n  handleGroupScript,\r\n} from \"./commandGroop\";\r\n\r\nexport interface TextCommandMapper<T> {\r\n  showMessage(groop: EventCommandGroup_Message): T;\r\n  showScrollingText(groop: EventCommandGroup_ScrollingText): T;\r\n  comment(groop: EventCommandGroup_Comment): T;\r\n  script(groop: EventCommandGroup_Script): T;\r\n\r\n  showChoices: CallBackFunc<Command_ShowChoices, T>;\r\n  choiceWhen: CallBackFunc<Command_ChoiceWhen, T>;\r\n  changeName: CallBackFunc<Command_ChangeName, T>;\r\n  changeProfile: CallBackFunc<Command_ChangeProfile, T>;\r\n  changeNickname: CallBackFunc<Command_ChangeNickName, T>;\r\n  commentBody: CallBackFunc<Command_CommentBody, T>;\r\n\r\n  other: CallBackFunc<EventCommand, T>;\r\n}\r\n\r\nexport const mapTextCommand = <T>(\r\n  list: ReadonlyArray<EventCommand>,\r\n  table: TextCommandMapper<T>\r\n) => {\r\n  return list.map<T>((command, index, array) => {\r\n    switch (command.code) {\r\n      case SHOW_MESSAGE:\r\n        return handleGroupMessage(array, index, table.showMessage);\r\n      case SHOW_SCROLLING_TEXT:\r\n        return handleGroupScrollingText(array, index, table.showScrollingText);\r\n      case COMMENT:\r\n        return handleGroupComment(array, index, table.comment);\r\n      case SCRIPT_EVAL:\r\n        return handleGroupScript(array, index, table.script);\r\n      case SHOW_CHOICES:\r\n        return table.showChoices(command, index, array);\r\n      case SHOW_CHOICES_ITEM:\r\n        return table.choiceWhen(command, index, array);\r\n      case CHANGE_NAME:\r\n        return table.changeName(command, index, array);\r\n      case CHANGE_PROFILE:\r\n        return table.changeProfile(command, index, array);\r\n      case CHANGE_NICKNAME:\r\n        return table.changeNickname(command, index, array);\r\n\r\n      default:\r\n        return table.other(command, index, array);\r\n    }\r\n  });\r\n};\r\n","import type { NoteReadResult } from \"./types\";\r\n\r\nexport const createNoteEntity = (key: string, value: string): string => {\r\n  return `<${key}:${value}>`;\r\n};\r\n\r\nexport const makeRegex = () => /<([^<>:]+):([^>]*)>/g;\r\n\r\nexport const readNoteObject = <Result, T extends { note: string }>(\r\n  data: T,\r\n  fn: (key: string, value: string, data: T) => Result\r\n): Result[] => readNoteEx(data.note, (key, value) => fn(key, value, data));\r\n\r\nexport const readNote = (note: string): NoteReadResult[] => {\r\n  return readNoteEx(note, (key, value) => [key, value]);\r\n};\r\n/**\r\n * note文字列を解析し、キーと値のペアを取得します。\r\n * タグが閉じられていない場合、その要素は無視されます。\r\n */\r\nexport const readNoteEx = <Result>(\r\n  note: string,\r\n  fn: (key: string, value: string) => Result\r\n): Result[] => {\r\n  const regex = makeRegex();\r\n  const result: Result[] = [];\r\n  let match: RegExpExecArray | null;\r\n\r\n  while ((match = regex.exec(note)) !== null) {\r\n    result.push(fn(match[1], match[2]));\r\n  }\r\n  return result;\r\n};\r\n/**\r\n *\r\n * @param note\r\n * @param transformFunction この関数の戻り値でvalueを置き換える\r\n * @returns\r\n */\r\nexport const replaceNote = (\r\n  note: string,\r\n  transformFunction: (key: string, value: string) => string\r\n): string => {\r\n  return note.replace(makeRegex(), (_subString, key: string, value: string) => {\r\n    const newText = transformFunction(key, value);\r\n    return createNoteEntity(key, newText);\r\n  });\r\n};\r\n\r\nexport const getNoteValue = (\r\n  note: string,\r\n  targetKey: string\r\n): string | undefined => {\r\n  const regex = makeRegex();\r\n  let match: RegExpExecArray | null;\r\n\r\n  while ((match = regex.exec(note)) !== null) {\r\n    if (match[1] === targetKey) {\r\n      return match[2];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const setNoteValue = (\r\n  note: string,\r\n  targetKey: string,\r\n  newValue: string\r\n): string => {\r\n  const regex = makeRegex();\r\n\r\n  return note.replace(regex, (match, key: string) => {\r\n    if (key === targetKey) {\r\n      return createNoteEntity(key, newValue); // 対象キーの場合のみ値を差し替え\r\n    }\r\n    return match; // 対象外はそのまま\r\n  });\r\n};\r\n","import type { EventCode } from \"@sigureya/rpgtypes\";\r\n\r\nexport const codeInfoText = (code: EventCode) => {\r\n  return `code:${code}`;\r\n};\r\n","export const ACTOR = \"N\" as const;\r\nexport const VARIABLE = \"V\" as const;\r\n","import type { Data_Actor, Data_System } from \"@sigureya/rpgtypes\";\r\nimport { ACTOR, VARIABLE } from \"./constants\";\r\nimport type { ControlCharInfo, ControlChars } from \"./types\";\r\n\r\nexport const createControlCharFormat = <C extends ControlChars>(\r\n  char: C,\r\n  id: number\r\n) => {\r\n  return `\\\\${char}[${id}]` as const;\r\n};\r\n\r\nexport const fromActor = (actor: Data_Actor) => {\r\n  return createControlCharFormat(ACTOR, actor.id);\r\n};\r\n\r\nexport const fromActors = (\r\n  actors: ReadonlyArray<Data_Actor>\r\n): ControlCharInfo[] => {\r\n  return actors.map<ControlCharInfo>((actor) => ({\r\n    controlChar: fromActor(actor),\r\n    text: actor.name,\r\n  }));\r\n};\r\nexport const fromSystem = (system: Data_System): ControlCharInfo[] => {\r\n  return system.variables\r\n    .map<ControlCharInfo>((name, index) => ({\r\n      text: name || \"\",\r\n      controlChar: createControlCharFormat(VARIABLE, index),\r\n    }))\r\n    .filter((pair) => pair.text !== \"\");\r\n};\r\n","export interface ControlChar {\r\n  char: string; // 制御文字\r\n  id: number; // 数字部分\r\n}\r\n\r\nconst defaultSet: ReadonlySet<Lowercase<string>> = new Set([\r\n  \"px\",\r\n  \"py\",\r\n  \"x\",\r\n  \"y\",\r\n  \"v\",\r\n  \"n\",\r\n  \"p\",\r\n  \"g\",\r\n  \"c\",\r\n  \"i\",\r\n  \"fs\",\r\n]);\r\n\r\n/**\r\n * 指定されたテキストから制御文字を抽出し、ControlChar配列として返します。\r\n * 制御文字の形式: \\(文字)[数字]\r\n * 文字の大文字小文字を区別しない。\r\n */\r\nexport const getControlChars = (\r\n  text: string,\r\n  validChars: ReadonlySet<Lowercase<string>> = defaultSet\r\n): ControlChar[] => {\r\n  // 正規表現: \\(制御文字)[数字]\r\n  const regex = /\\\\([A-Za-z]+)\\[(\\d+)]/g;\r\n\r\n  const controlChars: ControlChar[] = [];\r\n  let match: RegExpExecArray | null;\r\n\r\n  while ((match = regex.exec(text)) !== null) {\r\n    const char = match[1].toLowerCase() as Lowercase<string>;\r\n    const id = parseInt(match[2], 10);\r\n\r\n    if (validChars.has(char)) {\r\n      controlChars.push({ char: match[1], id }); // 大文字小文字区別しないが元の文字を保持\r\n    }\r\n  }\r\n\r\n  return controlChars;\r\n};\r\n","import type { PickByType } from \"@sigureya/rpgtypes\";\r\n\r\nexport const pickPropertys = <\r\n  Result,\r\n  Value,\r\n  T extends Record<KeyType, Value> = Record<string, Value>,\r\n  KeyType extends string & keyof PickByType<T, Value> = string &\r\n    keyof PickByType<T, Value>\r\n>(\r\n  data: T,\r\n  keyList: ReadonlyArray<string & keyof PickByType<T, Value>>,\r\n  fn: (key: string, value: Value, data: T) => Result\r\n): Result[] => {\r\n  return keyList.map((key) => fn(key, data[key], data));\r\n};\r\n\r\nexport const pickString = <\r\n  Result,\r\n  T extends Record<KeyType, string> = Record<string, string>,\r\n  KeyType extends string & keyof PickByType<T, string> = string &\r\n    keyof PickByType<T, string>\r\n>(\r\n  data: T,\r\n  keyList: ReadonlyArray<KeyType>,\r\n  fn: (key: string, value: string, data: T) => Result\r\n): Result[] => {\r\n  return pickPropertys<Result, string, T>(data, keyList, fn);\r\n};\r\n","import type { IndexOfCommandParameter } from \"@sigureya/rpgtypes\";\r\n\r\nexport interface CommandParameter<T> {\r\n  code: number;\r\n  paramIndex: number;\r\n  value: T;\r\n}\r\n\r\nexport const pickCommandParamString = <\r\n  Params extends unknown[],\r\n  Index extends IndexOfCommandParameter<\r\n    { code: number; parameters: Params },\r\n    string\r\n  >\r\n>(\r\n  command: { code: number; parameters: Params },\r\n  index: Index\r\n): CommandParameter<Params[Index]> => ({\r\n  code: command.code,\r\n  paramIndex: index,\r\n  value: command.parameters[index],\r\n});\r\n\r\nexport const pickCommandParamNumber = <\r\n  Params extends unknown[],\r\n  Index extends IndexOfCommandParameter<\r\n    { code: number; parameters: Params },\r\n    number\r\n  >\r\n>(\r\n  command: { code: number; parameters: Params },\r\n  index: Index\r\n): CommandParameter<Params[Index]> => ({\r\n  code: command.code,\r\n  paramIndex: index,\r\n  value: command.parameters[index],\r\n});\r\n"],"names":["constructParamArray","constructActor","proto","constructEnemy","constructArmor","constructWeapon","constructDamage","constructClass","constructItem","constructSkill","constructState","createMap","createMapEvent","arg","createEventPage","createCondtion","createMapEventImage","createAudio","createSystemData","system","createTerms","createAdvanced","createSystemSoundsArray","createVehicle","createMessages","createCommandsArray","createParamNamesArray","createBasicTerms","names","codeTest","code","command","ERROR_COMMAND_MESSAGE","ERROR_INVALID_HEAD","isBodyParams","param","isHeadCommand","pickCommands","arrya","start","result","i","pickHead","commands","index","head","joinCommandBodies","array","sepadrator","v","pickComments","COMMENT","COMMENT_BODY","pickScripts","SCRIPT_EVAL","SCRIPT_EVAL_BODY","pickMessageHeader","isMessageHeader","SHOW_MESSAGE","pickMessageWithHead","SHOW_MESSAGE_BODY","ERROR_MESSAGE","pickScrollTextHeader","cmd","SHOW_SCROLLING_TEXT","error","SHOW_SCROLLING_TEXT_BODY","pickScrollText","BaseEventCommandGroup","pair","separator","SimpleEventCommandGroup","CombinedEventCommandGroup","handleGroupMessage","func","group","handleGroupScrollingText","handleGroupComment","handleGroupScript","groop","mapTextCommand","list","table","SHOW_CHOICES","SHOW_CHOICES_ITEM","CHANGE_NAME","CHANGE_PROFILE","CHANGE_NICKNAME","createNoteEntity","key","value","makeRegex","readNoteObject","data","fn","readNoteEx","readNote","note","regex","match","replaceNote","transformFunction","_subString","newText","getNoteValue","targetKey","setNoteValue","newValue","codeInfoText","ACTOR","VARIABLE","createControlCharFormat","char","id","fromActor","actor","fromActors","actors","fromSystem","name","defaultSet","getControlChars","text","validChars","controlChars","pickPropertys","keyList","pickString","pickCommandParamString","pickCommandParamNumber"],"mappings":"sHAYaA,EAAsB,IAC1B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAGnBC,EAAkBC,IACtB,CACL,GAAI,EACJ,KAAM,GACN,SAAU,GACV,QAAS,GACT,KAAM,GACN,QAAS,EACT,aAAc,EACd,SAAU,GACV,eAAgB,EAChB,cAAe,GACf,UAAW,EACX,SAAU,GACV,YAAa,GACb,OAAQ,CAAC,EACT,OAAQ,CAAC,EACT,GAAGA,CACL,GAGWC,EAAkBD,IACtB,CACL,WAAY,EACZ,GAAI,EACJ,KAAM,GACN,KAAM,GACN,YAAa,GACb,OAAQ,CAAC,EACT,OAAQF,EAAoB,EAC5B,IAAK,EACL,KAAM,EACN,UAAW,CAAC,EACZ,QAAS,CAAC,EAEV,GAAGE,CACL,GAGWE,EAAkBF,IACtB,CACL,MAAO,EACP,GAAI,EACJ,KAAM,GACN,KAAM,GACN,UAAW,EACX,YAAa,GACb,QAAS,EACT,OAAQF,EAAoB,EAC5B,OAAQ,CAAC,EAET,GAAGE,CACL,GAEWG,EAAmBH,IACvB,CACL,MAAO,EACP,GAAI,EACJ,KAAM,GACN,KAAM,GACN,UAAW,EACX,YAAa,GACb,QAAS,EACT,QAAS,EACT,OAAQF,EAAoB,EAC5B,OAAQ,CAAC,EACT,OAAQM,EAAgB,EAExB,GAAGJ,CACL,GAGWK,EAAkBL,IACtB,CACL,GAAI,EACJ,KAAM,GACN,KAAM,GACN,OAAQ,CAAC,EACT,UAAW,CAAC,EACZ,OAAQF,EAAoB,EAC5B,UAAW,CAAC,EACZ,GAAGE,CACL,GAGWI,EACXJ,IAEO,CACL,KAAM,EACN,UAAW,EACX,QAAS,IACT,SAAU,GACV,SAAU,GACV,GAAGA,CACL,GAGWM,EAAiBN,IACrB,CACL,GAAI,EACJ,KAAM,GACN,UAAW,EACX,YAAa,GACb,KAAM,GACN,MAAO,EACP,WAAY,GACZ,MAAO,EACP,SAAU,EACV,MAAO,EACP,YAAa,IACb,QAAS,EACT,OAAQ,EACR,QAAS,EACT,YAAa,EACb,OAAQI,EAAgB,EACxB,QAAS,CAAC,EACV,GAAGJ,CACL,GAGWO,GAAkBP,IACtB,CACL,YAAa,EACb,OAAQI,EAAgB,EACxB,YAAa,GACb,QAAS,EACT,UAAW,EACX,GAAI,EACJ,SAAU,GACV,SAAU,GACV,OAAQ,EACR,KAAM,GACN,KAAM,GACN,SAAU,EACV,QAAS,EACT,iBAAkB,EAClB,iBAAkB,EAClB,MAAO,EACP,MAAO,EACP,QAAS,EACT,YAAa,IACb,OAAQ,EACR,OAAQ,EACR,QAAS,CAAC,EACV,YAAa,EAEb,GAAGJ,CACL,GAGWQ,GAAkBR,IACtB,CACL,GAAI,EACJ,KAAM,GACN,UAAW,EACX,YAAa,EACb,SAAU,GACV,OAAQ,EACR,QAAS,EACT,kBAAmB,GACnB,oBAAqB,GACrB,kBAAmB,EACnB,SAAU,EACV,SAAU,EACV,eAAgB,GAChB,eAAgB,IAChB,gBAAiB,GACjB,cAAe,IACf,SAAU,GACV,SAAU,GACV,SAAU,GACV,SAAU,GACV,OAAQ,CAAC,EACT,KAAM,GACN,GAAGA,CACL,GC7LWS,GACXT,IAIc,CACd,YAAa,GACb,YAAa,GACb,gBAAiB,GACjB,gBAAiB,GACjB,KAAM,CAAC,EACP,eAAgB,GAChB,YAAa,GACb,cAAe,CAAC,EAChB,OAAQ,CAAC,EACT,OAAQ,EACR,KAAM,GACN,MAAO,EACP,EAAG,EACH,EAAG,EACH,aAAc,GACd,cAAe,GACf,cAAe,GACf,aAAc,GACd,WAAY,EACZ,WAAY,EACZ,GAAGA,CACL,GAEaU,GAAkBC,IAAuC,CACpE,GAAI,EACJ,KAAM,GACN,KAAM,GACN,EAAG,EACH,EAAG,EACH,MAAO,CAACC,GAAiB,EACzB,GAAGD,CACL,GAEaE,EACXF,IACgC,CAChC,QAAS,EACT,WAAY,GACZ,OAAQ,EACR,UAAW,GACX,aAAc,GACd,gBAAiB,GACjB,UAAW,EACX,aAAc,GACd,UAAW,EACX,aAAc,GACd,WAAY,EACZ,cAAe,GACf,cAAe,EACf,GAAGA,CACL,GAEaG,EACXH,IAC2B,CAC3B,eAAgB,EAChB,cAAe,GACf,UAAW,EACX,QAAS,EACT,OAAQ,EACR,GAAGA,CACL,GAEaC,EAAmBD,IAA+C,CAC7E,WAAYE,EAAe,EAC3B,MAAOC,EAAoB,EAC3B,UAAW,CACT,KAAM,CAAC,EACP,OAAQ,GACR,KAAM,GACN,UAAW,EACb,EACA,aAAc,GACd,cAAe,EACf,KAAM,CAAC,EACP,GAAGH,CACL,GCnFaI,EAAc,KAClB,CACL,KAAM,GACN,IAAK,EACL,MAAO,IACP,OAAQ,EACV,GCQWC,GAAmB,CAC9BC,EAA+B,MACd,CACjB,MAAOA,EAAO,OAAS,GACvB,UAAWA,EAAO,WAAa,GAC/B,aAAcA,EAAO,cAAgB,GACrC,WAAYA,EAAO,YAAc,GACjC,MAAOA,EAAO,OAASC,EAAY,EACnC,WAAYD,EAAO,YAAc,GACjC,YAAaA,EAAO,aAAe,GACnC,cAAeA,EAAO,eAAiB,CAAC,EACxC,WAAYA,EAAO,YAAc,EACjC,OAAQA,EAAO,QAAU,EACzB,OAAQA,EAAO,QAAU,EACzB,SAAUA,EAAO,UAAY,CAAC,EAC9B,WAAYA,EAAO,YAAc,CAAC,EAAG,EAAG,EAAG,CAAC,EAC5C,UAAWA,EAAO,WAAa,EAC/B,YAAaA,EAAO,aAAe,EACnC,aAAcA,EAAO,cAAgB,CAAC,EACtC,UAAWA,EAAO,WAAa,EAC/B,SAAUA,EAAO,UAAYE,EAAe,EAC5C,WAAYF,EAAO,YAAc,CAAC,EAClC,SAAUA,EAAO,UAAY,CAAC,EAC9B,UAAWA,EAAO,WAAa,CAAC,EAChC,WAAYA,EAAO,YAAc,CAAC,EAClC,OAAQA,EAAO,QAAUG,EAAwB,EACjD,SAAUH,EAAO,UAAYF,EAAY,EACzC,WAAYE,EAAO,YAAcF,EAAY,EAC7C,UAAWE,EAAO,WAAaF,EAAY,EAC3C,SAAUE,EAAO,UAAYF,EAAY,EACzC,UAAWE,EAAO,WAAaF,EAAY,EAC3C,gBAAiBE,EAAO,iBAAmB,GAC3C,gBAAiBA,EAAO,iBAAmB,GAC3C,YAAaA,EAAO,aAAe,GACnC,YAAaA,EAAO,aAAe,CAAC,EACpC,WAAYA,EAAO,YAAc,CAAC,EAClC,aAAcA,EAAO,cAAgB,GACrC,aAAcA,EAAO,cAAgB,GACrC,YAAaA,EAAO,aAAe,GACnC,cAAeA,EAAO,eAAiB,GACvC,aAAcA,EAAO,cAAgB,GACrC,kBAAmBA,EAAO,mBAAqB,GAC/C,YAAaA,EAAO,aAAe,GACnC,aAAcA,EAAO,cAAgB,GACrC,eAAgBA,EAAO,gBAAkB,GACzC,KAAMA,EAAO,MAAQI,EAAc,EACnC,KAAMJ,EAAO,MAAQI,EAAc,EACnC,QAASJ,EAAO,SAAWI,EAAc,EACzC,SAAUJ,EAAO,UAAY,CAC/B,GAEaC,EAAc,CACzBlB,EAKI,MACc,CAClB,SAAUsB,EAAetB,EAAM,UAAY,CAAA,CAAE,EAC7C,SAAUuB,EAAoBvB,EAAM,UAAY,CAAA,CAAE,EAClD,OAAQwB,EAAsBxB,EAAM,QAAU,CAAA,CAAE,EAChD,MAAOyB,EAAiBzB,EAAM,OAAS,CAAE,CAAA,CAC3C,GAEayB,EAAmB,CAC9BzB,EAA6B,KACR,CACrBA,EAAM,OAAS,GACfA,EAAM,QAAU,GAChBA,EAAM,IAAM,GACZA,EAAM,KAAO,GACbA,EAAM,IAAM,GACZA,EAAM,KAAO,GACbA,EAAM,IAAM,GACZA,EAAM,KAAO,GACbA,EAAM,YAAc,GACpBA,EAAM,KAAO,EACf,EAEawB,EAAwB,CACnCE,EAAqC,KACX,CAC1BA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,GACbA,EAAM,KAAO,EACf,EAEaH,EAAsB,CACjCvB,EAAiC,KACV,CACvBA,EAAM,OAAS,GACfA,EAAM,QAAU,GAChBA,EAAM,QAAU,GAChBA,EAAM,OAAS,GACfA,EAAM,MAAQ,GACdA,EAAM,OAAS,GACfA,EAAM,OAAS,GACfA,EAAM,QAAU,GAChBA,EAAM,WAAa,GACnBA,EAAM,MAAQ,GACdA,EAAM,SAAW,GACjBA,EAAM,SAAW,GACjBA,EAAM,QAAU,GAChBA,EAAM,OAAS,GACfA,EAAM,SAAW,GACjBA,EAAM,QAAU,GAChBA,EAAM,UAAY,GAClBA,EAAM,OAAS,GACfA,EAAM,SAAW,GACjBA,EAAM,WAAa,GACnBA,EAAM,WAAa,GACnBA,EAAM,SAAW,GACjBA,EAAM,QAAU,GAChBA,EAAM,WAAa,GACnBA,EAAM,KAAO,GACbA,EAAM,MAAQ,EAChB,EAEasB,EAAiB,CAC5BtB,EAAiC,MACb,CACpB,WAAYA,EAAM,YAAc,GAChC,gBAAiBA,EAAM,iBAAmB,GAC1C,QAASA,EAAM,SAAW,GAC1B,UAAWA,EAAM,WAAa,GAC9B,UAAWA,EAAM,WAAa,GAC9B,SAAUA,EAAM,UAAY,GAC5B,SAAUA,EAAM,UAAY,GAC5B,WAAYA,EAAM,YAAc,GAChC,SAAUA,EAAM,UAAY,GAC5B,QAASA,EAAM,SAAW,GAC1B,YAAaA,EAAM,aAAe,GAClC,YAAaA,EAAM,aAAe,GAClC,KAAMA,EAAM,MAAQ,GACpB,SAAUA,EAAM,UAAY,GAC5B,UAAWA,EAAM,WAAa,GAC9B,OAAQA,EAAM,QAAU,GACxB,WAAYA,EAAM,YAAc,GAChC,SAAUA,EAAM,UAAY,GAC5B,YAAaA,EAAM,aAAe,GAClC,cAAeA,EAAM,eAAiB,GACtC,QAASA,EAAM,SAAW,GAC1B,OAAQA,EAAM,QAAU,GACxB,UAAWA,EAAM,WAAa,GAC9B,WAAYA,EAAM,YAAc,GAChC,WAAYA,EAAM,YAAc,GAChC,QAASA,EAAM,SAAW,GAC1B,YAAaA,EAAM,aAAe,GAClC,QAASA,EAAM,SAAW,GAC1B,gBAAiBA,EAAM,iBAAmB,GAC1C,gBAAiBA,EAAM,iBAAmB,GAC1C,YAAaA,EAAM,aAAe,GAClC,cAAeA,EAAM,eAAiB,GACtC,UAAWA,EAAM,WAAa,GAC9B,UAAWA,EAAM,WAAa,GAC9B,WAAYA,EAAM,YAAc,GAChC,cAAeA,EAAM,eAAiB,GACtC,WAAYA,EAAM,YAAc,GAChC,YAAaA,EAAM,aAAe,GAClC,cAAeA,EAAM,eAAiB,GACtC,UAAWA,EAAM,WAAa,GAC9B,UAAWA,EAAM,WAAa,GAC9B,WAAYA,EAAM,YAAc,GAChC,cAAeA,EAAM,eAAiB,GACtC,WAAYA,EAAM,YAAc,GAChC,QAASA,EAAM,SAAW,GAC1B,aAAcA,EAAM,cAAgB,GACpC,gBAAiBA,EAAM,iBAAmB,GAC1C,cAAeA,EAAM,eAAiB,GACtC,WAAYA,EAAM,YAAc,GAChC,QAASA,EAAM,SAAW,GAC1B,UAAWA,EAAM,WAAa,GAC9B,WAAYA,EAAM,YAAc,GAChC,cAAeA,EAAM,eAAiB,EACxC,GACamB,EAAiB,CAC5BnB,EAAkC,MACb,CACrB,OAAQA,EAAM,QAAU,EACxB,YAAaA,EAAM,aAAe,EAClC,aAAcA,EAAM,cAAgB,EACpC,YAAaA,EAAM,aAAe,EAClC,aAAcA,EAAM,cAAgB,EACpC,cAAeA,EAAM,eAAiB,EACtC,YAAaA,EAAM,aAAe,EAClC,mBAAoBA,EAAM,oBAAsB,GAChD,iBAAkBA,EAAM,kBAAoB,GAC5C,cAAeA,EAAM,eAAiB,GACtC,SAAUA,EAAM,UAAY,CAC9B,GAEaqB,EAAgB,CAC3BrB,EAA+B,MACb,CAClB,IAAKA,EAAM,KAAOe,EAAY,EAC9B,eAAgBf,EAAM,gBAAkB,EACxC,cAAeA,EAAM,eAAiB,GACtC,WAAYA,EAAM,YAAc,EAChC,OAAQA,EAAM,QAAU,EACxB,OAAQA,EAAM,QAAU,CAC1B,GAEaoB,EAA0B,CACrCpB,EAA+B,KACR,CACvBA,EAAM,QAAUe,EAAY,EAC5Bf,EAAM,IAAMe,EAAY,EACxBf,EAAM,QAAUe,EAAY,EAC5Bf,EAAM,QAAUe,EAAY,EAC5Bf,EAAM,OAASe,EAAY,EAC3Bf,EAAM,MAAQe,EAAY,EAC1Bf,EAAM,MAAQe,EAAY,EAC1Bf,EAAM,aAAee,EAAY,EACjCf,EAAM,QAAUe,EAAY,EAC5Bf,EAAM,aAAee,EAAY,EACjCf,EAAM,aAAee,EAAY,EACjCf,EAAM,eAAiBe,EAAY,EACnCf,EAAM,eAAiBe,EAAY,EACnCf,EAAM,eAAiBe,EAAY,EACnCf,EAAM,aAAee,EAAY,EACjCf,EAAM,eAAiBe,EAAY,EACnCf,EAAM,cAAgBe,EAAY,EAClCf,EAAM,UAAYe,EAAY,EAC9Bf,EAAM,aAAee,EAAY,EACjCf,EAAM,kBAAoBe,EAAY,EACtCf,EAAM,gBAAkBe,EAAY,EACpCf,EAAM,MAAQe,EAAY,EAC1Bf,EAAM,SAAWe,EAAY,EAC7Bf,EAAM,UAAYe,EAAY,CAChC,EC3PaY,EAAW,CACtBC,EACAC,IAEKA,EAGED,IAASC,EAAQ,KAFf,GCPEC,GAAwB,gCAExBC,GAAqB,eCOrBC,EACXC,GAEO,OAAOA,EAAM,CAAC,GAAM,UAAYA,EAAM,SAAW,EAG7CC,GAAgB,CAC3BN,EACAC,IAMKA,EAGED,IAASC,EAAQ,MAAQG,EAAaH,EAAQ,UAAU,EAFtD,GAKEM,EAAe,CAC1BP,EACAQ,EACAC,IACG,CACH,MAAMC,EAIA,CAAC,EACP,QAASC,EAAIF,EAAOE,EAAIH,EAAM,OAAQG,IAAK,CACnC,MAAAV,EAAUO,EAAMG,CAAC,EACvB,GAAIZ,EAASC,EAAMC,CAAO,GAAKG,EAAaH,EAAQ,UAAU,EAC5DS,EAAO,KAAK,CACV,KAAAV,EACA,OAAQC,EAAQ,OAChB,WAAY,CAACA,EAAQ,WAAW,CAAC,CAAC,CAAA,CACnC,MAED,MACF,CAEK,OAAAS,CACT,EAEaE,EAAW,CACtBC,EACAC,EACAd,IAC2B,CACrB,MAAAe,EAAOF,EAASC,CAAK,EAC3B,GAAIC,GACEhB,EAASC,EAAMe,CAAI,GAAKX,EAAaW,EAAK,UAAU,EAC/C,MAAA,CACL,KAAAf,EACA,OAAQe,EAAK,OACb,WAAY,CAACA,EAAK,WAAW,CAAC,CAAC,CACjC,EAGJ,MAAM,IAAI,MAAMZ,GAAoB,CAAE,MAAOY,EAAM,CACrD,ECpEaC,EAAoB,CAC/BC,EACAC,EAAa;AAAA,IAEND,EAAM,IAAKE,GAAMA,EAAE,WAAW,CAAC,CAAC,EAAE,KAAKD,CAAU,ECG7CE,EAAe,CAC1BH,EACAR,KAIO,CACL,KAHWG,EAASK,EAAOR,EAAOY,EAAAA,OAAO,EAIzC,MAAOd,EAAae,EAAAA,aAAcL,EAAOR,EAAQ,CAAC,CACpD,GCTWc,EAAc,CACzBf,EACAC,KAGO,CACL,KAFWG,EAASJ,EAAOC,EAAOe,EAAAA,WAAW,EAG7C,MAAOjB,EAAakB,EAAAA,iBAAkBjB,EAAOC,EAAQ,CAAC,CACxD,GCJWiB,EAAoB,CAC/BlB,EACAC,IACwB,CAClB,MAAAM,EAAOP,EAAMC,CAAK,EACxB,GAAIM,GACEY,EAAgBZ,CAAI,EACf,OAAAA,EAGX,MAAM,IAAI,MAAMb,GAAuB,CAAE,MAAOa,EAAM,CACxD,EAEaY,EACX1B,GAEI,CAACA,GAGDA,EAAQ,OAAS2B,gBAGjB,CAAC,CAAC,EAAG,CAAC,EAAE,SAAS3B,EAAQ,WAAW,MAAM,EACrC,GAIP,OAAOA,EAAQ,WAAW,CAAC,GAAM,UACjC,OAAOA,EAAQ,WAAW,CAAC,GAAM,UACjC,OAAOA,EAAQ,WAAW,CAAC,GAAM,UACjC,OAAOA,EAAQ,WAAW,CAAC,GAAM,SAIxB4B,EAAsB,CACjCrB,EACAC,KAGO,CACL,KAFWiB,EAAkBlB,EAAOC,CAAK,EAGzC,MAAOF,EAAauB,EAAAA,kBAAmBtB,EAAOC,EAAQ,CAAC,CACzD,GCtCWsB,EAAgB,mCAEhBC,EAAuB,CAClCf,EACAR,IAC8B,CACxB,MAAAwB,EAAMhB,EAAMR,CAAK,EACnB,GAAAV,EAASmC,sBAAqBD,CAAG,EAC5B,OAAAA,EAET,MAAME,EAA0B,CAC9B,SAAUD,EAAA,oBACV,SAAUE,EAAA,yBACV,MAAO3B,CACT,EACA,MAAM,IAAI,MAAMsB,EAAe,CAAE,MAAOI,EAAO,CACjD,EAEaE,EAAiB,CAC5BpB,EACAR,KAGO,CACL,KAFWuB,EAAqBf,EAAOR,CAAK,EAG5C,MAAOF,EAAa6B,EAAAA,yBAA0BnB,EAAOR,EAAQ,CAAC,CAChE,GCnCK,MAAe6B,CAItB,CACE,YAAsBC,EAAsC,CAAtC,KAAA,KAAAA,CAAA,CAGtB,YAAYC,EAAoB;AAAA,EAAc,CAC5C,OAAOxB,EAAkB,KAAK,kBAAkB,EAAGwB,CAAS,CAAA,CAG9D,mBAAoB,CAClB,OAAO,KAAK,kBAAkB,CAAA,CAGhC,IAAI,QAAiB,CACnB,OAAO,KAAK,KAAK,IAAA,CAEnB,IAAI,QAAiB,CACnB,OAAO,KAAK,KAAK,KAAA,CAErB,CAEO,MAAMC,UAGHH,CAAoC,CAC5C,YAAYC,EAAsC,CAChD,MAAMA,CAAI,CAAA,CAEF,mBAA4B,CACpC,OAAO,KAAK,MAAA,CAEhB,CAEO,MAAMG,UAGHJ,CAAoC,CAC5C,YAAYC,EAAsC,CAChD,MAAMA,CAAI,CAAA,CAEF,mBAAyC,CACjD,MAAO,CAAC,KAAK,OAAQ,GAAG,KAAK,MAAM,CAAA,CAEvC,CClCO,MAAMI,EAAqB,CAChC1B,EACAH,EACA8B,IACW,CACL,MAAAL,EAAOV,EAAoBZ,EAAOH,CAAK,EAEvC+B,EAAQ,IAAIJ,EAAwBF,CAAI,EAC9C,OAAOK,EAAKC,CAAK,CACnB,EAEaC,EAA2B,CACtC7B,EACAH,EACA8B,IACW,CACL,MAAAL,EAAOF,EAAepB,EAAOH,CAAK,EAClC+B,EAAQ,IAAIJ,EAAwBF,CAAI,EAC9C,OAAOK,EAAKC,CAAK,CACnB,EAEaE,EAAqB,CAChC9B,EACAH,EACA8B,IACW,CACL,MAAAL,EAAOnB,EAAaH,EAAOH,CAAK,EAChC+B,EAAQ,IAAIH,EAA0BH,CAAI,EAChD,OAAOK,EAAKC,CAAK,CACnB,EAEaG,EAAoB,CAC/B/B,EACAH,EACA8B,IACW,CACL,MAAAL,EAAOhB,EAAYN,EAAOH,CAAK,EAC/BmC,EAAQ,IAAIP,EAA0BH,CAAI,EAChD,OAAOK,EAAKK,CAAK,CACnB,ECVaC,GAAiB,CAC5BC,EACAC,IAEOD,EAAK,IAAO,CAAClD,EAASa,EAAOG,IAAU,CAC5C,OAAQhB,EAAQ,KAAM,CACpB,KAAK2B,EAAA,aACH,OAAOe,EAAmB1B,EAAOH,EAAOsC,EAAM,WAAW,EAC3D,KAAKlB,EAAA,oBACH,OAAOY,EAAyB7B,EAAOH,EAAOsC,EAAM,iBAAiB,EACvE,KAAK/B,EAAA,QACH,OAAO0B,EAAmB9B,EAAOH,EAAOsC,EAAM,OAAO,EACvD,KAAK5B,EAAA,YACH,OAAOwB,EAAkB/B,EAAOH,EAAOsC,EAAM,MAAM,EACrD,KAAKC,EAAA,aACH,OAAOD,EAAM,YAAYnD,EAASa,EAAOG,CAAK,EAChD,KAAKqC,EAAA,kBACH,OAAOF,EAAM,WAAWnD,EAASa,EAAOG,CAAK,EAC/C,KAAKsC,EAAA,YACH,OAAOH,EAAM,WAAWnD,EAASa,EAAOG,CAAK,EAC/C,KAAKuC,EAAA,eACH,OAAOJ,EAAM,cAAcnD,EAASa,EAAOG,CAAK,EAClD,KAAKwC,EAAA,gBACH,OAAOL,EAAM,eAAenD,EAASa,EAAOG,CAAK,EAEnD,QACE,OAAOmC,EAAM,MAAMnD,EAASa,EAAOG,CAAK,CAAA,CAC5C,CACD,EC3EUyC,EAAmB,CAACC,EAAaC,IACrC,IAAID,CAAG,IAAIC,CAAK,IAGZC,EAAY,IAAM,uBAElBC,GAAiB,CAC5BC,EACAC,IACaC,EAAWF,EAAK,KAAM,CAACJ,EAAKC,IAAUI,EAAGL,EAAKC,EAAOG,CAAI,CAAC,EAE5DG,GAAYC,GAChBF,EAAWE,EAAM,CAACR,EAAKC,IAAU,CAACD,EAAKC,CAAK,CAAC,EAMzCK,EAAa,CACxBE,EACAH,IACa,CACb,MAAMI,EAAQP,EAAU,EAClBnD,EAAmB,CAAC,EACtB,IAAA2D,EAEJ,MAAQA,EAAQD,EAAM,KAAKD,CAAI,KAAO,MAC7BzD,EAAA,KAAKsD,EAAGK,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,CAAC,EAE7B,OAAA3D,CACT,EAOa4D,GAAc,CACzBH,EACAI,IAEOJ,EAAK,QAAQN,EAAA,EAAa,CAACW,EAAYb,EAAaC,IAAkB,CACrE,MAAAa,EAAUF,EAAkBZ,EAAKC,CAAK,EACrC,OAAAF,EAAiBC,EAAKc,CAAO,CAAA,CACrC,EAGUC,GAAe,CAC1BP,EACAQ,IACuB,CACvB,MAAMP,EAAQP,EAAU,EACpB,IAAAQ,EAEJ,MAAQA,EAAQD,EAAM,KAAKD,CAAI,KAAO,MAChC,GAAAE,EAAM,CAAC,IAAMM,EACf,OAAON,EAAM,CAAC,CAIpB,EAEaO,GAAe,CAC1BT,EACAQ,EACAE,IACW,CACX,MAAMT,EAAQP,EAAU,EAExB,OAAOM,EAAK,QAAQC,EAAO,CAACC,EAAOV,IAC7BA,IAAQgB,EACHjB,EAAiBC,EAAKkB,CAAQ,EAEhCR,CACR,CACH,EC3EaS,GAAgB9E,GACpB,QAAQA,CAAI,GCHR+E,GAAQ,IACRC,GAAW,ICGXC,EAA0B,CACrCC,EACAC,IAEO,KAAKD,CAAI,IAAIC,CAAE,IAGXC,EAAaC,GACjBJ,EAAwBF,GAAOM,EAAM,EAAE,EAGnCC,GACXC,GAEOA,EAAO,IAAsBF,IAAW,CAC7C,YAAaD,EAAUC,CAAK,EAC5B,KAAMA,EAAM,IAAA,EACZ,EAESG,GAAcnG,GAClBA,EAAO,UACX,IAAqB,CAACoG,EAAM3E,KAAW,CACtC,KAAM2E,GAAQ,GACd,YAAaR,EAAwBD,GAAUlE,CAAK,CAAA,EACpD,EACD,OAAQyB,GAASA,EAAK,OAAS,EAAE,ECxBhCmD,OAAiD,IAAI,CACzD,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACF,CAAC,EAOYC,GAAkB,CAC7BC,EACAC,EAA6CH,KAC3B,CAElB,MAAMtB,EAAQ,yBAER0B,EAA8B,CAAC,EACjC,IAAAzB,EAEJ,MAAQA,EAAQD,EAAM,KAAKwB,CAAI,KAAO,MAAM,CAC1C,MAAMV,EAAOb,EAAM,CAAC,EAAE,YAAY,EAC5Bc,EAAK,SAASd,EAAM,CAAC,EAAG,EAAE,EAE5BwB,EAAW,IAAIX,CAAI,GACrBY,EAAa,KAAK,CAAE,KAAMzB,EAAM,CAAC,EAAG,GAAAc,EAAI,CAC1C,CAGK,OAAAW,CACT,EC1CaC,EAAgB,CAO3BhC,EACAiC,EACAhC,IAEOgC,EAAQ,IAAKrC,GAAQK,EAAGL,EAAKI,EAAKJ,CAAG,EAAGI,CAAI,CAAC,EAGzCkC,GAAa,CAMxBlC,EACAiC,EACAhC,IAEO+B,EAAiChC,EAAMiC,EAAShC,CAAE,EClB9CkC,GAAyB,CAOpCjG,EACAa,KACqC,CACrC,KAAMb,EAAQ,KACd,WAAYa,EACZ,MAAOb,EAAQ,WAAWa,CAAK,CACjC,GAEaqF,GAAyB,CAOpClG,EACAa,KACqC,CACrC,KAAMb,EAAQ,KACd,WAAYa,EACZ,MAAOb,EAAQ,WAAWa,CAAK,CACjC"}